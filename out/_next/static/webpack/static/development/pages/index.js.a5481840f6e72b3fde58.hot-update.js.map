{"version":3,"file":"static/webpack/static/development/pages/index.js.a5481840f6e72b3fde58.hot-update.js","sources":["webpack:///./components/track.tsx","webpack:///./components/tracks.tsx","webpack:///./pages/index.tsx"],"sourcesContent":["/** @jsx jsx */ import { jsx } from '@emotion/core'\nimport { GitHub } from 'react-feather';\nimport { Document } from 'prismic-javascript/d.ts/documents';\n//@ts-ignore\nimport { RichText, Date } from 'prismic-reactjs';\nimport React from 'react';\n\ninterface Props {\n    doc: Document\n}\n\ninterface State {\n    data: any\n}\n\nclass Track extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            data: this.props.doc.data\n        }\n    }\n\n    formatDate(date: string) {\n        const d = Date(date);\n        return Intl.DateTimeFormat('en-AU', {\n            year: 'numeric',\n            month: 'short',\n            day: '2-digit' \n        }).format(d);\n    }\n\n    render() {\n        return (\n            <li>\n                <div>\n                    <h4 css={{marginBottom: 0, marginTop: 0}}>{RichText.asText(this.state.data.name)}</h4>\n                    <a target={this.state.data.github_link.target} href={this.state.data.url.url}>\n                        Listen Here\n                    </a>\n                </div>\n            </li>\n        )\n    }\n}\n\nexport default Track","import React from \"react\";\nimport Prismic from 'prismic-javascript';\nimport { Document } from \"prismic-javascript/d.ts/documents\";\nimport Track from \"./track\";\n\ninterface Props {\n\n}\n\ninterface State {\n    docs: Document[]\n}\n\nclass Tracks extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            docs: []\n        }\n    }\n\n    async componentDidMount() {\n        const cmsEndpoint = 'https://shobokshy.cdn.prismic.io/api/v2';\n        const api = await Prismic.api(cmsEndpoint);\n        const response = await api.query(Prismic.Predicates.at('document.type', 'track'), {});\n        if(response) this.setState({docs: response.results})\n    }\n\n    render() {\n        return (\n            <ul>\n                {this.state.docs.map(doc => (\n                    <Track key={doc.id} doc={doc}/>\n                ))}\n            </ul>\n        )\n    }\n}\n\nexport default Tracks","import Layout, { Column } from '../components/layout';\nimport Intro from '../components/intro';\nimport Projects from '../components/projects';\nimport Tracks from '../components/tracks';\n\nconst Index = () => (\n\t<Layout>\n\t\t<Intro/>\n\t\t<Column css={{\n\t\t\tgridColumnStart: 2\n\t\t}}>\n\t\t\t<Projects/>\n\t\t\t<Tracks />\n\t\t</Column>\n  \t</Layout>\n)\n  \nexport default Index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAGA;AACA;AACA;AACA;AASA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA5BA;AACA;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AAEA;AACA;AASA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;;;;;;;;;;AAEA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;;;;AAvBA;AACA;AAyBA;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AAWA;;;;A","sourceRoot":""}